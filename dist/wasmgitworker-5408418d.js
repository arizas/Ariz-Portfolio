let e,a,t=!1;let n="ANONYMOUS";XMLHttpRequest.prototype._open=XMLHttpRequest.prototype.open,XMLHttpRequest.prototype.open=function(e,a,t,i,s){this._open(e,a,t,i,s),this.setRequestHeader("Authorization",`Bearer ${n}`)},self.Module={locateFile:function(e){return"https://unpkg.com/wasm-git@0.0.10/"+e},print:function(a){t&&(e+=a+"\n"),postMessage({progress:a}),console.log(a)},printErr:function(e){t&&(a+=e+"\n"),console.error(e)}},importScripts("https://unpkg.com/wasm-git@0.0.10/lg2.js");const i=new Promise((e=>{Module.onRuntimeInitialized=()=>{FS.mkdir("/nearearningsdata"),FS.mount(IDBFS,{},"/nearearningsdata"),FS.chdir("/nearearningsdata"),FS.syncfs(!0,(()=>{e(Module)}))}}));async function s(){await new Promise((e=>FS.syncfs(!1,e)))}self.onmessage=async r=>{await i;try{let i;a="",e="";const o=r.data;switch(o.command){case"configureuser":n=o.accessToken,callMain(["config","user.name",o.username]),callMain(["config","user.email",o.useremail]),i={accessTokenConfigured:!0};break;case"writeFile":FS.writeFile(o.filename,o.content),await s();break;case"readTextFile":i=FS.readFile(o.filename,{encoding:"utf8"});break;case"exists":i=FS.analyzePath(o.path).exists;break;case"mkdir":FS.mkdir(o.path);break;case"readdir":i=FS.readdir(o.path);break;case"git":t=!0,callMain(o),t=!1,["init","commit","add","revert","pull","fetch","merge","clone"].indexOf(o[0])>-1&&await s(),i={stdout:e,stderr:a};break;case"getremote":t=!0,callMain(["remote","show","-v"]),t=!1,i=e;break;case"setremote":callMain(["remote","remove","origin"]),callMain(["remote","add","origin",o.remoteurl]),await s();break;case"sync":if(t=!0,callMain(["fetch","origin"]),callMain(["merge","origin/master"]),callMain(["push"]),t=!1,a)throw a;i=e,await s();break;case"deletelocal":FS.unmount("/nearearningsdata"),console.log("deleting database","nearearningsdata"),self.indexedDB.deleteDatabase("/nearearningsdata"),i={deleted:"nearearningsdata"};break;case"commitall":t=!0,callMain(["status"]),t=!1;const r=e.split("\n");r.filter((e=>0==e.indexOf("#\tmodified:"))).map((e=>e.substr("#\tmodified:".length).trim())).forEach((e=>callMain(["add",e])));const l=r.indexOf("# Untracked files:");if(l>-1){let e=r.slice(l+3).map((e=>e.substr("#\t".length)));e=e.slice(0,e.length-1),e.length>0&&e.forEach((e=>callMain(["add",e])))}t=!0,callMain(["status"]),t=!1,e.indexOf("Changes to be committed:")>-1?(callMain(["commit","-m","add all untracked data files"]),await s()):console.log("nothing to commit")}postMessage({result:i})}catch(e){postMessage({error:e.toString()})}};
