return <>
    <div class="container">
        <iframe class="w-100 h-100" src="data:text/html;base64,<!DOCTYPE html><html><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
</head>
<body>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand nav-link" href="/">NEAR account report</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                <div class="navbar-nav">                    
                    <a class="nav-item nav-link" href="/year-report" data-page="year-report">Year report</a>
                    <a class="nav-item nav-link" href="/transactions" data-page="transactions">Transactions</a>
                    <a class="nav-item nav-link" href="/staking" data-page="staking">Staking rewards</a>
                    <a class="nav-item nav-link" href="/accounts" data-page="accounts">Accounts</a>
                    <a class="nav-item nav-link" href="/storage" data-page="storage">Storage</a>
                </div>
            </div>
        </div>
    </nav>
    <br>
    <app-near-numbers></app-near-numbers>


<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>
<script type="module">import"https://cdn.jsdelivr.net/npm/near-api-js@0.44.2/dist/near-api-js.min.js";let t;function e(e,n){null!==e?(t||(t=document.createElement("progress-bar"),document.documentElement.appendChild(t)),t.setValue(e,n)):t&&(t.remove(),t=null)}customElements.define("progress-bar",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n<style type="text/css">\n:host {\n    position: fixed;\n    top:0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n    font-family: monospace;\n    margin: auto;\n    z-index: 1000;\n    background-color: rgba(100, 100, 100, 0.5);\n}\n\n.progress-border {\n    position: fixed;\n    top:0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n  \t\n    margin: auto;\n\n    border: green solid 1px;\n    height: 50px;\n    width: 100%;\n}\n\n.progress-text {\n    position: absolute;\n    color: white;\n    text-align: center;\n    width: 100%;\n    height: 100%;\n    font-size: 22px;\n}\n\n.progress-fill {\n    background-color: rgba(0,255,0, 0.7);\n    height: 50px;    \n    animation-name: indeterminate;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n}\n@keyframes indeterminate {\n    0% { margin-left: 0%; width: 10%;}\n    25% { width: 20%; }\n    50% { margin-left: 90%; width: 10%; }\n    75% { width: 20%; }\n    100% { margin-left: 0%; width: 10%; }\n}\n</style>\n<div id="main-progress-bar" class="progress-border">\n<div class="progress-text">50%</div>\n<div class="progress-fill" style="width:20%"></div>\n</div>\n'}setValue(t,e){"indeterminate"==t?(this.shadowRoot.querySelector(".progress-text").innerHTML=`<div style="margin-top: 10px">${e}</div>`,this.shadowRoot.querySelector(".progress-fill").style.width="10%",this.shadowRoot.querySelector(".progress-fill").style.animationName="indeterminate"):(this.shadowRoot.querySelector(".progress-fill").style.animationName="none",this.shadowRoot.querySelector(".progress-text").innerHTML=`${(100*t).toFixed(0)}%${e?`<br />${e}`:""}`,this.shadowRoot.querySelector(".progress-fill").style.width=`${(100*t).toFixed(2)}%`)}});const n=new Worker(URL.createObjectURL(new Blob([(()=>{const t=function(){let t,e,n=!1;const a="nearearningsdata";let o="ANONYMOUS";XMLHttpRequest.prototype._open=XMLHttpRequest.prototype.open,XMLHttpRequest.prototype.open=function(t,e,n,a,i){this._open(t,e,n,a,i),this.setRequestHeader("Authorization",`Bearer ${o}`)},self.Module={locateFile:function(t){return"https://unpkg.com/wasm-git@0.0.10/"+t},print:function(e){n&&(t+=e+"\n"),postMessage({progress:e}),console.log(e)},printErr:function(t){n&&(e+=t+"\n"),console.error(t)}},importScripts("https://unpkg.com/wasm-git@0.0.10/lg2.js");const i=new Promise((t=>{Module.onRuntimeInitialized=()=>{FS.mkdir("/nearearningsdata"),FS.mount("null"==self.origin?MEMFS:IDBFS,{},"/nearearningsdata"),FS.chdir("/nearearningsdata"),FS.syncfs(!0,(()=>{t(Module)}))}}));async function s(){await new Promise((t=>FS.syncfs(!1,t)))}self.onmessage=async c=>{await i;try{let i;e="",t="";const r=c.data;switch(r.command){case"configureuser":o=r.accessToken,callMain(["config","user.name",r.username]),callMain(["config","user.email",r.useremail]),i={accessTokenConfigured:!0};break;case"writeFile":FS.writeFile(r.filename,r.content),await s();break;case"readTextFile":i=FS.readFile(r.filename,{encoding:"utf8"});break;case"exists":i=FS.analyzePath(r.path).exists;break;case"mkdir":FS.mkdir(r.path);break;case"readdir":i=FS.readdir(r.path);break;case"git":n=!0,callMain(r),n=!1,["init","commit","add","revert","pull","fetch","merge","clone"].indexOf(r[0])>-1&&await s(),i={stdout:t,stderr:e};break;case"getremote":n=!0,callMain(["remote","show","-v"]),n=!1,i=t;break;case"setremote":callMain(["remote","remove","origin"]),callMain(["remote","add","origin",r.remoteurl]),await s();break;case"sync":if(n=!0,callMain(["fetch","origin"]),callMain(["merge","origin/master"]),callMain(["push"]),n=!1,e)throw e;i=t,await s();break;case"deletelocal":FS.unmount("/nearearningsdata"),console.log("deleting database",a),self.indexedDB.deleteDatabase("/nearearningsdata"),i={deleted:a};break;case"commitall":n=!0,callMain(["status"]),n=!1;const c=t.split("\n");c.filter((t=>0==t.indexOf("#\tmodified:"))).map((t=>t.substr("#\tmodified:".length).trim())).forEach((t=>callMain(["add",t])));const l=c.indexOf("# Untracked files:");if(l>-1){let t=c.slice(l+3).map((t=>t.substr("#\t".length)));t=t.slice(0,t.length-1),t.length>0&&t.forEach((t=>callMain(["add",t])))}n=!0,callMain(["status"]),n=!1,t.indexOf("Changes to be committed:")>-1?(callMain(["commit","-m","add all untracked data files"]),await s()):console.log("nothing to commit")}postMessage({result:i})}catch(t){postMessage({error:t.toString()})}}}.toString();return t.substring(t.indexOf("{")+1,t.lastIndexOf("}"))})()],{type:"text/javascript"})));let a;const o=async(o,i)=>{for(;a;)await a;return a=new Promise(((s,c)=>{const r=!!t;n.onmessage=t=>{a=null,t.data.error?c(t.data.error):t.data.progress?e("indeterminate",t.data.progress):(r||e(null),s(t.data))},n.postMessage(Object.assign(i,{command:o}))})),a};async function i(t,e){return await o("writeFile",{filename:t,content:e})}async function s(t){return(await o("readTextFile",{filename:t})).result}async function c(t){return(await o("exists",{path:t})).result}async function r(t){await o("mkdir",{path:t})}async function l(t,n=10,a=3e4){let o;for(let i=0;i<n;i++)try{return await t()}catch(t){o=t,console.error("error",t,"retrying in ",a,"milliseconds"),e("indeterminate",`error ${t} retrying in ${(a/1e3).toFixed(0)} seconds`),await new Promise((t=>setTimeout(t,a)))}throw e(null),console.error("max retries reached"),o}async function d(t,e=100,n=1e6*(new Date).getTime()){return await fetch(`https://api.kitwallet.app/account/${t}/activity?offset=${n}&limit=${e}`).then((t=>t.json()))}async function h(t,e){const n=(await async function(t,e){return(await fetch(" https://archival-rpc.mainnet.near.org",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:"dontcare",method:"tx",params:[t,e]})}).then((t=>t.json()))).result}(e,t)).receipts_outcome.map((t=>t.block_hash)),a=await Promise.all(n.map((e=>async function(t,e){return(await fetch(" https://archival-rpc.mainnet.near.org",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:"dontcare",method:"query",params:{request_type:"view_account",account_id:e,block_id:"final"===t?void 0:t,finality:"final"===t?t:void 0}})}).then((t=>t.json()))).result}(e,t))));return a.sort(((t,e)=>e.block_height-t.block_height)),a[0].amount}async function u(){return JSON.parse(await s("accounts.json"))}async function p(t){const e=`accountdata/${t}/transactions.json`;return await c(e)?JSON.parse(await s(e)):[]}async function m(t){await c("accountdata")||await r("accountdata");const e=`accountdata/${t}`;await c(e)||await r(e)}async function w(t,n=1e6*(new Date).getTime()){let a=await p(t);return a=await async function(t,n,a=[],o=100){let i=await d(t,o,n),s=0;for(;;){let c=0;for(let o=0;o<i.length;o++){const r=i[o];a.find((t=>t.hash==r.hash&&t.action_index==r.action_index&&r.block_hash==t.block_hash&&t.action_kind==r.action_kind&&t.signer_id==r.signer_id))||(r.balance=await l((()=>h(t,r.hash))),r.args&&delete r.args.args_base64,a.splice(s++,0,r),n=parseInt(r.block_timestamp)+1,c++),e(o/i.length,`${t} ${new Date(r.block_timestamp/1e6).toDateString()}`)}if(0==c)break;i=await d(t,o,n)}return a}(t,n,a),await async function(t,e){await m(t),await i(`accountdata/${t}/transactions.json`,JSON.stringify(e,null,1))}(t,a),a}function g(t){return`accountdata/${t}/stakingpools`}function y(t,e){return`${g(t)}/${e}.json`}async function b(t,e){const n=y(t,e);return await c(n)?JSON.parse(await s(n)):[]}async function f(t,n){const a=await b(t,n),o=await async function(t,n,a,o="final"){let i=await v(o);const s=(await p(n)).filter((e=>(e.receiver_id===t||e.signer_id===t)&&e.block_timestamp<i.header.timestamp)),c=s[s.length-1],r=parseInt(c.block_timestamp),d=i.header.timestamp;let h=await k(t,n,i.header.height);0==h&&(i=await v(s[0].block_hash),h=await k(t,n,i.header.height));let u=a.length>0?a[0].epoch_id:null,m=0;for(;e(1-(i.header.timestamp-r)/(d-r),`${n} / ${t} ${new Date(i.header.timestamp/1e6).toDateString()}`),!(i.header.epoch_id==u||i.header.timestamp<r);){const e=await l((()=>k(t,n,i.header.next_epoch_id))),o={timestamp:new Date(i.header.timestamp/1e6),balance:h,block_height:i.header.height,epoch_id:i.header.epoch_id,next_epoch_id:i.header.next_epoch_id,deposit:0,withdrawal:0};a.splice(m++,0,o),h=e,i=await l((()=>v(i.header.next_epoch_id)))}for(let e of s)if(!a.find((t=>t.hash===e.hash))){i=await l((()=>v(e.block_hash)));const o=await l((()=>k(t,n,e.block_hash)));a.push({timestamp:new Date(e.block_timestamp/1e6),balance:o,hash:e.hash,block_height:i.header.height,epoch_id:i.header.epoch_id,next_epoch_id:i.header.next_epoch_id,deposit:e.signer_id==n?parseInt(e.args.deposit):0,withdrawal:e.signer_id==t?parseInt(e.args.deposit):0})}a.sort(((t,e)=>e.block_height-t.block_height));for(let t=0;t<a.length-1;t++){const e=a[t];e.deposit||(e.deposit=0),e.withdrawal||(e.withdrawal=0),e.earnings=e.balance-a[t+1].balance-e.deposit+e.withdrawal}return a[a.length-1].earnings=0,a}(n,t,a);await async function(t,e,n){await m(t);const a=g(t);await c(a)||await r(a);const o=y(t,e);await i(o,JSON.stringify(n,null,1))}(t,n,o)}async function v(t){return(await fetch("https://archival-rpc.mainnet.near.org",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:"dontcare",method:"block",params:{block_id:"final"===t?void 0:t,finality:"final"===t?t:void 0}})}).then((t=>t.json()))).result}async function k(t,e,n){return await fetch("https://archival-rpc.mainnet.near.org",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:"dontcare",method:"query",params:{request_type:"call_function",block_id:n,account_id:t,method_name:"get_account_total_balance",args_base64:btoa(JSON.stringify({account_id:e}))}})}).then((t=>t.json())).then((t=>parseInt(t.result.result.map((t=>String.fromCharCode(t))).join("").replace(/\"/g,""))))}async function S(t){const e=(await p(t)).filter((t=>"FUNCTION_CALL"==t.action_kind&&"deposit_and_stake"==t.args.method_name)),n=[];return e.forEach((t=>{n.find((e=>e==t.receiver_id))||n.push(t.receiver_id)})),n}function _(t){return[...new Set(t.filter((t=>"FUNCTION_CALL"===t.action_kind&&"deposit_and_stake"===t.args.method_name)).map((t=>t.receiver_id)))]}async function x(t,e){return async function(t){const e=document.createElement("common-modal");e.shadowRoot.innerHTML=`<style>\n    :host {\n        position: fixed;\n        display: flex;\n        top:0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        margin: auto;\n        z-index: 1000;\n        background-color: rgba(255, 255, 255, 0.7);\n    }\n    .modaldiv {\n        margin: auto;\n        text-align: center;\n        padding: 20px;\n        background-color: rgba(0, 0, 0, 0.8);\n        border: #4a4 solid 5px;\n        color: #4a4;\n        font-family: monospace;\n        font-size: 20px;\n        max-width: 800px;\n        border-radius: 50px;\n    }\n    button, textarea, select {\n        font-family: monospace;\n        background-color: #cfc;\n        border-color: #4a4;\n        border-width: 1px;\n        color:#050;\n        padding: 10px;\n        font-size: 20px;\n        \n        border-radius: 4px;\n        white-space: nowrap;\n        \n        margin: 2px;\n        user-select: none;\n    }\n    textarea {\n        width: 80%;\n        height: 80px;\n    }\n</style>\n<div class="modaldiv">\n    ${t}\n</div>`,document.documentElement.appendChild(e);const n=await e.resultPromise;return document.documentElement.removeChild(e),n}(`\n    <h3>${t}</h3>\n    <p>${e}</p>\n    <p>\n        <button onclick="getRootNode().result(true)">Dismiss</button>\n    </p>`)}customElements.define("common-modal",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.resultPromise=new Promise((t=>this.shadowRoot.result=t))}}),customElements.define("accounts-page",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.readyPromise=this.loadHTML()}async loadHTML(){return this.shadowRoot.innerHTML='<template id="accountRowTemplate">\n    <div class="input-group">\n        <input type="text" class="accountname form-control"></td>\n        <button class="btn btn-danger removeAccountButton"><i class="bi bi-trash"></i></button>\n    </div>\n</template>\n\n<div class="card">\n    <div class="card-header">Accounts</div>\n    <div class="card-body">\n        <div id="accountsTable"></div>\n    </div>\n    <div class="card-footer">\n        <button id="addAccountButton" class="btn btn-primary">Add account</button>\n        <button type="button" class="btn btn-primary" id="loaddatabutton">load data</button>\n    </div>\n</div>\n',this.accountsTable=this.shadowRoot.querySelector("#accountsTable"),this.shadowRoot.querySelector("#addAccountButton").onclick=async()=>{this.addAccountRow(),await this.storeAccounts()},document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode()))),this.shadowRoot.getElementById("loaddatabutton").addEventListener("click",(async()=>{e(0);try{for(const t of this.getAccounts()){const e=await w(t),n=await _(e);for(const e of n)await f(t,e)}e(null)}catch(t){e(null),x("Error fetching data",t.message)}this.dispatchChangeEvent()})),await c("accounts.json")&&this.setAccounts(await u()),this.shadowRoot}dispatchChangeEvent(){this.dispatchEvent(new Event("change"))}addAccountRow(t){const e=this.shadowRoot.querySelector("#accountRowTemplate");this.accountsTable.appendChild(e.content.cloneNode(!0));const n=this.accountsTable.lastElementChild,a=n.querySelector(".accountname");t&&(a.value=t),a.addEventListener("change",(t=>this.dispatchChangeEvent())),n.querySelector(".removeAccountButton").onclick=async()=>{n.remove(),await this.storeAccounts()}}setAccounts(t){this.accountsTable.replaceChildren([]),t.forEach((t=>this.addAccountRow(t)))}getAccounts(){return Array.from(this.accountsTable.querySelectorAll(".accountname")).map((t=>t.value))}async storeAccounts(){await async function(t){await i("accounts.json",JSON.stringify(t))}(this.getAccounts())}});const T={};async function M(){const t=(await(await fetch("https://api.coingecko.com/api/v3/coins/near")).json()).market_data.current_price;return Object.keys(t)}async function E(t,e){const n=new Date(e).getTime(),a=await async function(t){return T[t]||(T[t]=(await fetch(`https://api.coingecko.com/api/v3/coins/near/market_chart/range?vs_currency=${t}&from=0&to=${(new Date).getTime()/1e3}`).then((t=>t.json()))).prices),T[t]}(t),o=a.find((t=>t[0]===n));return o?o[1]:null}customElements.define("transactions-page",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.readyPromise=this.loadHTML()}async loadHTML(){this.shadowRoot.innerHTML='<style>\n    .numeric {\n        text-align: right;\n    }\n\n    .transactionrow_datetime {\n        white-space: nowrap;\n    }\n\n    .table-responsive {\n        max-height: 100%;\n    }\n\n    table thead,\n    table tfoot {\n        position: sticky;\n    }\n\n    table thead {\n        inset-block-start: 0;\n        top: 0;\n    }\n\n    table tfoot {\n        inset-block-end: 0;\n        bottom: 0;\n    }\n    .transactionrow_signer {\n        text-overflow: clip;\n    }\n    .transactionrow_receiver {\n        text-overflow: clip;\n    }\n</style>\n<h3>Transactions</h3>\n<div class="row">\n<div class="col-md-6">\n    <label for="accountselect" class="form-label">Account</label>\n    <select class="form-select" aria-label="Select account" id="accountselect">\n        <option disabled selected value>Select account</option>\n    </select>\n</div>\n<div class="col-md-6">\n    <label for="currencyselect" class="form-label">Currency</label>\n    <select class="form-select" aria-label="Select currency" id="currencyselect">\n        <option value="near">NEAR</option>\n    </select>\n</div>\n<template id="transactionrowtemplate">\n    <tr>\n        <td class="transactionrow_datetime"></td>\n        <td class="transactionrow_kind"></td>\n        <td class="transactionrow_balance numeric"></td>\n        <td class="transactionrow_change numeric"></td>\n        <td class="transactionrow_signer"></td>\n        <td class="transactionrow_receiver"></td>\n        <td class="transactionrow_hash"></td>\n    </tr>\n</template>\n<div class="table-responsive">\n    <table class="table table-sm">\n        <thead class="table-dark">\n            <th scope="col">\n                date\n            </th>\n            <th scope="col">\n                kind\n            </th>\n            <th scope="col">\n                balance\n            </th>\n            <th scope="col">\n                change\n            </th>\n            <th scope="col">\n                signer\n            </th>\n            <th scope="col">\n                receiver\n            </th>\n            <th scope="col">\n                hash\n            </th>\n        </thead>\n        <tbody id="transactionstable">\n\n        </tbody>\n    </table>\n</div>\n',this.transactionsTable=this.shadowRoot.getElementById("transactionstable"),document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode())));const t=this.shadowRoot.querySelector("#accountselect");await Promise.all((await u()).map((async e=>{const n=document.createElement("option");n.value=e,n.text=e,t.appendChild(n)})));const e=this.shadowRoot.querySelector("#currencyselect");(await M()).forEach((t=>{const n=document.createElement("option");n.value=t,n.text=t.toUpperCase(),e.appendChild(n)}));const n=()=>{const n=t.value,a=e.value;this.updateView(n,a,2)};return t.addEventListener("change",n),e.addEventListener("change",n),this.shadowRoot}async updateView(t,e,n){const a=await p(t),o=this.shadowRoot.querySelector("#transactionrowtemplate");for(;this.transactionsTable.lastElementChild;)this.transactionsTable.removeChild(this.transactionsTable.lastElementChild);for(let t=0;t<a.length;t++){this.transactionsTable.appendChild(o.content.cloneNode(!0));const i=this.transactionsTable.lastElementChild,s=a[t],c=t<a.length-1?a[t+1].balance:0,r=(s.balance-c)/1e24,l=new Date(s.block_timestamp/1e6).toJSON().substring(0,"yyyy-MM-dd".length),d="near"==e?1:await E(e,l);i.querySelector(".transactionrow_datetime").innerHTML=l,i.querySelector(".transactionrow_kind").innerHTML=`${s.action_kind}${"FUNCTION_CALL"==s.action_kind?`(${s.args.method_name})`:""}`,i.querySelector(".transactionrow_balance").innerHTML=(d*(parseInt(s.balance)/1e24)).toFixed(n);const h=d*r;i.querySelector(".transactionrow_change").innerHTML=h.toFixed(n),i.querySelector(".transactionrow_signer").innerHTML=s.signer_id,i.querySelector(".transactionrow_receiver").innerHTML=s.receiver_id,i.querySelector(".transactionrow_hash").innerHTML=s.hash}const i=this.shadowRoot.querySelector(".table-responsive");i.style.height=window.innerHeight-i.getBoundingClientRect().top+"px"}});customElements.define("staking-page",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.readyPromise=this.loadHTML()}async loadHTML(){this.shadowRoot.innerHTML='<style>\n    .numeric {\n        text-align: right;\n    }\n\n    .stakingrewardrow_datetime {\n        white-space: nowrap;\n    }\n\n    .stakingrewardrow_balance {\n        white-space: nowrap;\n    }\n\n    .table-responsive {\n        max-height: 100%;\n    }\n\n    table thead,\n    table tfoot {\n        position: sticky;\n    }\n\n    table thead {\n        inset-block-start: 0;\n        top: 0;\n    }\n\n    table tfoot {\n        inset-block-end: 0;\n        bottom: 0;\n    }\n</style>\n<template id="stakingpoolselectoption">\n    <input type="radio" class="btn-check" name="stakingpoolselectoptions" autocomplete="off" checked>\n    <label class="btn btn-outline-success"></label>\n</template>\n<h3>Staking balance and rewards</h3>\n<div class="row">\n<div class="col-md-6">\n    <label for="accountselect" class="form-label">Account</label>\n    <select class="form-select" aria-label="Select account" id="accountselect">\n        <option disabled selected value>Select account</option>\n    </select>\n</div>\n<div class="col-md-6">\n    <label for="currencyselect" class="form-label">Currency</label>\n    <select class="form-select" aria-label="Select currency" id="currencyselect">\n        <option value="near">NEAR</option>\n    </select>\n</div>\n<div id="stakingpoolselect">\n\n</div>\n<template id="stakingrewardrowtemplate">\n    <tr>\n        <td class="stakingrewardrow_datetime"></td>\n        <td class="stakingrewardrow_balance numeric"></td>\n        <td class="stakingrewardrow_earnings numeric"></td>\n        <td class="stakingrewardrow_deposit numeric"></td>\n        <td class="stakingrewardrow_withdrawal numeric"></td>\n    </tr>\n</template>\n<div class="table-responsive">\n    <table class="table table-sm">\n        <thead class="table-dark">\n            <th scope="col">\n                date\n            </th>\n            <th scope="col">\n                balance\n            </th>\n            <th scope="col">\n                earnings\n            </th>\n            <th scope="col">\n                deposits\n            </th>\n            <th scope="col">\n                withdrawals\n            </th>\n        </thead>\n        <tbody id="stakingrewardstable">\n\n        </tbody>\n        <tfoot class="table-dark">\n            <th scope="col">\n                \n            </th>\n            <th scope="col">\n                \n            </th>\n            <th scope="col" id="totalEarnings" class="numeric">\n                \n            </th>\n            <th scope="col" class="numeric">\n                \n            </th>\n            <th scope="col" class="numeric">\n                \n            </th>\n        </tfoot>\n    </table>\n</div>\n\n</div>\n',this.stakingRewardsTable=this.shadowRoot.getElementById("stakingrewardstable"),document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode())));const t=this.shadowRoot.querySelector("#accountselect");await Promise.all((await u()).map((async e=>{const n=document.createElement("option");n.value=e,n.text=e,t.appendChild(n)})));const e=this.shadowRoot.querySelector("#currencyselect");(await M()).forEach((t=>{const n=document.createElement("option");n.value=t,n.text=t.toUpperCase(),e.appendChild(n)}));const n=()=>{const n=t.value,a=e.value;this.updateView(n,a,2)};return t.addEventListener("change",n),e.addEventListener("change",n),this.shadowRoot}async updateView(t,e,n){const a=await S(t),o=this.shadowRoot.getElementById("stakingpoolselectoption"),i=this.shadowRoot.getElementById("stakingpoolselect");for(;i.lastElementChild;)i.removeChild(i.lastElementChild);a.forEach((async a=>{const s=o.cloneNode(!0).content;s.querySelector("input").id=a,s.querySelector("label").htmlFor=a,s.querySelector("label").innerHTML=a,s.querySelector("input").addEventListener("click",(async()=>{const o=await b(t,a),i=this.shadowRoot.querySelector("#stakingrewardrowtemplate");let s=0;for(;this.stakingRewardsTable.lastElementChild;)this.stakingRewardsTable.removeChild(this.stakingRewardsTable.lastElementChild);for(let t=0;t<o.length;t++){const a=i.cloneNode(!0).content,c=o[t],r=c.timestamp.substring(0,"yyyy-MM-dd".length),l="near"==e?1:await E(e,r),d=l*c.earnings/1e24;s+=d;const h=l*c.deposit/1e24,u=l*c.withdrawal/1e24;a.querySelector(".stakingrewardrow_datetime").innerHTML=r,a.querySelector(".stakingrewardrow_balance").innerHTML=(l*(c.balance/1e24)).toFixed(n),a.querySelector(".stakingrewardrow_earnings").innerHTML=d.toFixed(n),a.querySelector(".stakingrewardrow_deposit").innerHTML=h.toFixed(n),a.querySelector(".stakingrewardrow_withdrawal").innerHTML=u.toFixed(n),this.stakingRewardsTable.appendChild(a)}this.shadowRoot.querySelector("#totalEarnings").innerHTML=s.toFixed(n)})),i.appendChild(s)}));const s=this.shadowRoot.querySelector(".table-responsive");s.style.height=window.innerHeight-s.getBoundingClientRect().top+"px"}});const R={nodeUrl:"https://rpc.mainnet.near.org",walletUrl:"https://wallet.near.org",helperUrl:"https://helper.mainnet.near.org",contractName:"wasmgit.near",deps:{}},L=new Promise((async t=>{if(window.top==window){R.deps.keyStore=new nearApi.keyStores.BrowserLocalStorageKeyStore;const e=await nearApi.connect(R);t(new nearApi.WalletConnection(e))}else console.log("wallet connection not supported in inframe"),t(null)}));customElements.define("storage-page",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.readyPromise=this.loadHTML()}async loadHTML(){if(this.shadowRoot.innerHTML='<div class="card">\n    <div class="card-header">Store data on a git server</div>\n    <div class="card-body">\n        <p>You may store a remote copy of your data in a git server, which you can then use to synchronize with other browsers and devices</p>\n        <p>Create a git repostiory at <a target="_blank" href="https://wasm-git.petersalomonsen.com">wasm-git.petersalomonsen.com</a> and then\n        log in and synchronize it here.</p>\n\n        <p>\n            <span id="currentuserspan"></span>\n            <button class="btn btn-primary" id="loginbutton">Login</button>\n            <button class="btn btn-warning" id="logoutbutton">Logout</button>\n        </p>\n        <p>\n        <label for="remoterepo" class="form-label">URL to git repository</label>\n        <input type="text" class="form-control" id="remoterepo" placeholder="https://wasm-git.petersalomonsen.com/YOUR_ACCOUNT-nearsight">\n        </p>\n        <button class="btn btn-primary" id="syncbutton">Synchronize</button>\n        <button class="btn btn-primary" id="deletelocaldatabutton">Delete local data</button>\n    </div>\n</div>',document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode()))),this.loginbutton=this.shadowRoot.querySelector("#loginbutton"),this.logoutbutton=this.shadowRoot.querySelector("#logoutbutton"),this.deletelocaldatabutton=this.shadowRoot.querySelector("#deletelocaldatabutton"),this.deletelocaldatabutton.addEventListener("click",(async()=>{console.log("delete local data"),this.deletelocaldatabutton.disabled=!0,await async function(){await o("deletelocal",[])}(),location.reload()})),window.top==window){if(!(await L).getAccountId())return console.log("no loggedin user"),this.logoutbutton.style.display="none",void this.loginbutton.addEventListener("click",(async()=>{await(await L).requestSignIn(R.contractName,"wasm-git"),this.loadAccountData()}));this.loadAccountData(),this.logoutbutton.addEventListener("click",(async()=>{(await L).signOut(),console.log("logged out"),this.loginbutton.style.display="block",this.logoutbutton.style.display="none"})),this.remoteRepoInput=this.shadowRoot.querySelector("#remoterepo"),this.remoteRepoInput.addEventListener("change",(async()=>{await async function(t){return(await o("setremote",{remoteurl:t})).result}(this.remoteRepoInput.value)})),this.remoteRepoInput.value=await async function(){const t=(await o("getremote",[])).result;return t?t.split("\n")[0].split(/\s+/)[1]:null}(),this.syncbutton=this.shadowRoot.querySelector("#syncbutton"),this.syncbutton.addEventListener("click",(async()=>{e("indeterminate","syncing with remote");try{this.syncbutton.disabled=!0,await c(".git")||(this.remoteRepoInput.value?await async function(t){return(await o("git",["clone",t,"."])).result}(this.remoteRepoInput.value):await async function(){return(await o("git",["init","."])).result}()),await async function(){return(await o("commitall",[])).result}(),await async function(){await o("sync",[])}(),this.dispatchSyncEvent()}catch(t){console.error(t),x("Error syncing with remote",t)}e(null),this.syncbutton.disabled=!1}))}return this.shadowRoot}dispatchSyncEvent(){this.dispatchEvent(new Event("sync"))}async loadAccountData(){let t={accountId:(await L).getAccountId()};this.loginbutton.style.display="none",this.shadowRoot.querySelector("#currentuserspan").innerHTML=`Logged in as ${t.accountId}`;const e=await async function(){const t=await L,e=t.getAccountId(),n=btoa(JSON.stringify({accountId:e,iat:(new Date).getTime()})),a=await t.account().connection.signer.signMessage((new TextEncoder).encode(n),e);return n+"."+btoa(String.fromCharCode(...a.signature))}();!async function(t){(await o("configureuser",t)).result}({accessToken:e,useremail:t.accountId,username:t.accountId})}});customElements.define("year-report-page",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.readyPromise=this.loadHTML()}async loadHTML(){this.shadowRoot.innerHTML='<style>\n    .numeric {\n        text-align: right;\n    }\n\n    .dailybalancerow_datetime {\n        white-space: nowrap;\n    }\n\n    .dailybalancerow_balance {\n        white-space: nowrap;\n    }\n\n    .table-responsive {\n        max-height: 100%;\n    }\n\n    table thead,\n    table tfoot {\n        position: sticky;\n    }\n\n    table thead {\n        inset-block-start: 0;\n        top: 0;\n    }\n\n    table tfoot {\n        inset-block-end: 0;\n        bottom: 0;\n    }\n\n    tr.inforow td {\n        font-size: 12px;   \n    }\n</style>\n<h3>Year report ( all accounts )</h3>\n<div class="row">\n    <div class="col-md-6">\n        <label for="yearselect" class="form-label">Select year</label>   \n        <select id="yearselect" class="form-select"></select>        \n    </div>\n    <div class="col-md-6">\n        <label for="currencyselect" class="form-label">Currency</label>\n        <select class="form-select" aria-label="Select currency" id="currencyselect">\n            <option value="near">NEAR</option>\n        </select>        \n    </div>\n</div>\n<template id="dailybalancerowtemplate">\n    <tr>\n        <td class="dailybalancerow_datetime"></td>\n        <td class="dailybalancerow_totalbalance numeric"></td>\n        <td class="dailybalancerow_change numeric"></td>\n        <td class="dailybalancerow_accountbalance numeric"></td>\n        <td class="dailybalancerow_accountchange numeric"></td>\n        <td class="dailybalancerow_stakingbalance numeric"></td>\n        <td class="dailybalancerow_stakingchange numeric"></td>\n        <td class="dailybalancerow_stakingreward numeric"></td>\n        <td class="dailybalancerow_deposit numeric"></td>\n        <td class="dailybalancerow_withdrawal numeric"></td>\n        <td class="dailybalancerow_profit numeric"></td>\n        <td class="dailybalancerow_loss numeric"></td>\n    </tr>\n    <tr class="inforow bg-info">\n        <td colspan="12" >\n            <table class="table table-sm table-borderless">\n                <thead>\n                    <tr>\n                        <th scope="col">acquisition date</th>\n                        <th scope="col">acquired amount</th>\n                        <th scope="col">acquisition price</th>\n                        <th scope="col">realized amount</th>\n                        <th scope="col">realization price</th>\n                    </tr>\n                </thead>\n                <tbody></tbody>\n            </table>\n        </td>\n    </tr>\n</template>\n<div class="table-responsive">\n    <table class="table table-sm">\n        <thead class="table-dark">\n            <th scope="col">\n                date\n            </th>\n            <th scope="col">\n                total balance\n            </th>\n            <th scope="col">\n                change\n            </th>\n            <th scope="col">\n                account balance\n            </th>\n            <th scope="col">\n                change\n            </th>\n            <th scope="col">\n                staking balance\n            </th>\n            <th scope="col">\n                change\n            </th>\n            <th scope="col">\n                reward\n            </th>\n            <th scope="col">\n                deposit\n            </th>\n            <th scope="col">\n                withdrawals\n            </th>\n            <th scope="col">\n                profit\n            </th>\n            <th scope="col">\n                loss\n            </th>\n            <th>\n                &nbsp;\n            </th>\n        </thead>\n        <tbody id="dailybalancestable">\n\n        </tbody>\n        <tfoot class="table-dark">\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col">\n\n            </th>\n            <th scope="col" class="numeric" id="totalreward">\n\n            </th>\n            <th scope="col" class="numeric" id="totaldeposit">\n\n            </th>\n            <th scope="col" class="numeric" id="totalwithdrawal">\n\n            </th>\n            <th scope="col" class="numeric" id="totalprofit">\n\n            </th>\n            <th scope="col" class="numeric" id="totalloss">\n\n            </th>\n            <th></th>\n        </tfoot>\n    </table>\n</div>\n',document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode()))),this.year=(new Date).getFullYear(),this.yearSelect=this.shadowRoot.querySelector("#yearselect");for(let t=this.year;t>=2020;t--){const e=document.createElement("option");e.value=t,e.innerHTML=`${t}`,t===this.year&&(e.selected=!0),this.yearSelect.appendChild(e)}this.yearSelect.addEventListener("change",(()=>{this.year=parseInt(this.yearSelect.value),this.refreshView()}));const t=this.shadowRoot.querySelector("#currencyselect");(await M()).forEach((e=>{const n=document.createElement("option");n.value=e,n.text=e.toUpperCase(),t.appendChild(n)}));return t.addEventListener("change",(()=>this.updateView(t.value,2))),this.updateView(t.value,2),this.shadowRoot}async updateView(t,e){this.convertToCurrency=t,this.numDecimals=e,await this.refreshView()}async refreshView(){const{dailyBalances:t,closedPositions:e,openPositions:n}=await async function(t,e="near"){if("near"==e)return{dailyBalances:t};const n=[],a=[];for(const o in t){const i=t[o];let s=0,c=0;if(i.deposit>0||i.reward>0){const t=i.deposit??0+i.reward??0,a=await E(e,o);n.push({date:o,initialAmount:t,remainingAmount:t,convertedValue:a*(t/1e24),conversionRate:a,realizations:[]})}if(i.withdrawal>0){let t=0;i.realizations=[];const r=await E(e,o);for(;n.length>0&&t<i.withdrawal;){const e=n[0];if(t+e.remainingAmount>i.withdrawal){const n=i.withdrawal-t,a=e.convertedValue*(n/e.initialAmount),l=n/1e24*r;e.remainingAmount-=n,t=i.withdrawal;const d=l-a;d>=0?s+=d:c+=-d;const h={date:o,amount:n,convertedValue:l,profit:d>=0?d:0,conversionRate:r,loss:d<0?-d:0};e.realizations.push(h),i.realizations.push(Object.assign({},h,{position:Object.assign({},e,{realizations:void 0})}))}else{t+=e.remainingAmount;const l=r*(e.remainingAmount/1e24),d=l-e.convertedValue*(e.remainingAmount/e.initialAmount);d>=0?s+=d:c+=-d;const h={date:o,amount:e.remainingAmount,convertedValue:l,conversionRate:r,profit:d>=0?d:0,loss:d<0?-d:0};e.realizations.push(h),i.realizations.push(Object.assign({},h,{position:Object.assign({},e,{realizations:void 0})})),e.remainingAmount=0,a.push(e),n.shift()}}i.profit=s,i.loss=c,t<i.withdrawal&&console.error(`should not happen: withdrawn amount larger than available positions. wanted to withdraw: ${i.withdrawal}, available: ${t}`)}}return{openPositions:n,closedPositions:a,dailyBalances:t}}(await async function(){const t=await u(),e={},n={},a={},o={};for(let i of t){const t=await p(i);for(let e=0;e<t.length;e++){const o=t[e];o.account=i,o.changedBalance=BigInt(o.balance)-(e<t.length-1?BigInt(t[e+1].balance):BigInt(o.balance)),n[o.hash]||(n[o.hash]=[]),n[o.hash].push(o);const s=new Date(o.block_timestamp/1e6).toJSON().substring(0,"yyyy-MM-dd".length);a[s]||(a[s]=[]),a[s].unshift(o)}const s=await S(i);e[i]={arr:t,stakingAccounts:s,stakingBalances:{}};for(let t of s){o[t]=!0;const n=await b(i,t);for(let a of n){const n=a.timestamp.substr(0,"yyyy-MM-dd".length),o=e[i].stakingBalances;o[n]||(o[n]={totalStakingBalance:0,totalEarnings:0}),null==o[n][t]&&(o[n][t]=a.balance,o[n].totalStakingBalance+=a.balance),o[n].totalEarnings+=a.earnings}}}const i={};let s,c=new Date(2020,0,1);const r=new Date,l={};for(;c.getTime()<r;){const r=c.toJSON().substring(0,"yyyy-MM-dd".length);if(i[r]={totalBalance:0,accountBalance:0,stakingBalance:0,stakingEarnings:0,deposit:0,withdrawal:0},c=new Date(c.getFullYear(),c.getMonth(),c.getDate()+1),t.forEach((t=>{const n=e[t];n.stakingBalances[r]?(i[r].stakingBalance+=n.stakingBalances[r].totalStakingBalance,i[r].stakingEarnings+=n.stakingBalances[r].totalEarnings):s&&n.stakingBalances[s]&&(i[r].stakingBalance+=n.stakingBalances[s].totalStakingBalance)})),a[r]&&a[r].forEach((t=>{let e=BigInt(0);n[t.hash].forEach((t=>{e+=t.changedBalance,t.changedBalance=BigInt(0)})),o[t.signer_id]||o[t.receiver_id]||(e>=BigInt(0)?i[r].deposit+=Number(e):i[r].withdrawal+=-Number(e)),l[t.account]=BigInt(t.balance)})),i[r].accountBalance=Object.values(l).reduce(((t,e)=>t+e),BigInt(0)),i[r].totalBalance=i[r].stakingBalance+Number(i[r].accountBalance),i[r].accounts=Object.assign({},l),s){const t=i[r].totalBalance-i[s].totalBalance,e=i[r].accountBalance-i[s].accountBalance,n=i[r].stakingBalance-i[s].stakingBalance,a=i[r].stakingEarnings;Object.assign(i[r],{totalChange:t,accountChange:e,stakingChange:n,stakingRewards:a})}s=r}return i}(),this.convertToCurrency),a=t,o=this.shadowRoot.querySelector("#dailybalancestable");for(;o.lastElementChild;)o.removeChild(o.lastElementChild);const i=this.shadowRoot.querySelector("#dailybalancerowtemplate");let s=(new Date).getFullYear()===this.year?new Date(new Date((new Date).getTime()-864e5).toJSON().substring(0,"yyyy-MM-dd".length)):new Date(`${this.year}-12-31`);const c=new Date(`${this.year}-01-01`);let r=0,l=0,d=0,h=0,m=0;for(;s.getTime()>=c;){const t=s.toJSON().substring(0,"yyyy-MM-dd".length),e=i.cloneNode(!0).content,n=a[t],c="near"==this.convertToCurrency?1:await E(this.convertToCurrency,t),u=c*(n.stakingRewards/1e24),p=c*(n.deposit/1e24),w=c*(n.withdrawal/1e24);if(r+=u,l+=p,d+=w,h+=n.profit??0,m+=n.loss??0,e.querySelector(".dailybalancerow_datetime").innerHTML=t,e.querySelector(".dailybalancerow_totalbalance").innerHTML=(c*(n.totalBalance/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_accountbalance").innerHTML=(c*(Number(n.accountBalance)/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_stakingbalance").innerHTML=(c*(n.stakingBalance/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_change").innerHTML=(c*(n.totalChange/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_accountchange").innerHTML=(c*(Number(n.accountChange)/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_stakingchange").innerHTML=(c*(n.stakingChange/1e24)).toFixed(this.numDecimals),e.querySelector(".dailybalancerow_stakingreward").innerHTML=u.toFixed(this.numDecimals),e.querySelector(".dailybalancerow_deposit").innerHTML=p.toFixed(this.numDecimals),e.querySelector(".dailybalancerow_withdrawal").innerHTML=w.toFixed(this.numDecimals),e.querySelector(".dailybalancerow_profit").innerHTML=n.profit?.toFixed(this.numDecimals)??"",e.querySelector(".dailybalancerow_loss").innerHTML=n.loss?.toFixed(this.numDecimals)??"",n.realizations){e.querySelector(".inforow td table tbody").innerHTML=n.realizations.map((t=>`\n                        <tr>\n                            <td>${t.position.date}</td>\n                            <td>${(t.position.initialAmount/1e24).toFixed(this.numDecimals)}</td>\n                            <td>${t.position.conversionRate.toFixed(this.numDecimals)}</td>\n                            <td>${(t.amount/1e24).toFixed(this.numDecimals)}</td>\n                            <td>${t.conversionRate.toFixed(this.numDecimals)}</td>\n                        </tr>\n                    `)).join("\n")}else e.querySelector(".inforow").remove();o.appendChild(e),s=new Date(s.getTime()-864e5)}this.shadowRoot.querySelector("#totalreward").innerHTML=r.toFixed(this.numDecimals),this.shadowRoot.querySelector("#totaldeposit").innerHTML=l.toFixed(this.numDecimals),this.shadowRoot.querySelector("#totalwithdrawal").innerHTML=d.toFixed(this.numDecimals),this.shadowRoot.querySelector("#totalprofit").innerHTML=h.toFixed(this.numDecimals),this.shadowRoot.querySelector("#totalloss").innerHTML=m.toFixed(this.numDecimals);const w=this.shadowRoot.querySelector(".table-responsive");w.style.height=window.innerHeight-w.getBoundingClientRect().top+"px"}});const q=import.meta.url.substring(0,import.meta.url.lastIndexOf("/")+1),C=q.substring(location.origin.length);Array.from(document.getElementsByClassName("nav-link")).forEach((t=>{const e=t.dataset.page;t.onclick=()=>(goToPage(e),!1)}));class H extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n<div class="container" id="mainContainer">\n    Get an overview of your NEAR accounts. See your transactions, staking rewards,\n    and get an annual report calculating profit and loss for each of your transactions.\n</div>\n',document.querySelectorAll("link").forEach((t=>this.shadowRoot.appendChild(t.cloneNode())));const t=this.shadowRoot.querySelector("#mainContainer");window.goToPage=e=>{const n=document.createElement(`${e}-page`),a=`${C}${e}`;window.top!=window||location.pathname==a&&0!=location.search.indexOf("?account_id")||history.pushState({},null,a),t.replaceChildren(n)},location.href!=q&&goToPage(location.href.substring(q.length))}}if(customElements.define("app-near-numbers",H),window.top==window){(async()=>{if("serviceWorker"in navigator)try{const t=await navigator.serviceWorker.register(q+"serviceworker.js",{scope:q});t.onupdatefound=()=>{console.log("update available")},t.installing?console.log("Service worker installing"):t.waiting?console.log("Service worker installed"):t.active&&(console.log("Service worker active"),await t.update())}catch(t){console.error(`Registration failed with ${t}`)}})()}
</script></body></html>"></iframe>
    </div>
</>;